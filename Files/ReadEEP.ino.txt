#include <Wire.h> //I2C library

#define WRITE 1 // Set to 1 to write new data before reading
#define RESET 1 // Set to 1 to write zero to the KLMS INC counter

#define EEPROMSIZE1 2048UL // Size of array
#define EEPROMSIZE2 0x2C0 //0x40UL // HOW MUCH TO WRITE
#define EEPROMSIZE3 0x2C0 //0x40UL // HOW MUCH TO READ
#define ADDRESS_SIZE 8

const uint8_t PROGMEM eepromdat [EEPROMSIZE1] = {
0x09, 0x00, 0xBC, 0x25, 0x29, 0x0A, 0x00, 0x00, 0xBB, 0xC7, 0x77, 0x8F, 0xEF, 0x1E, 0xDE, 0x3D, 0xBC, 0x7B, 0x78, 0xF7, 0xF1, 0xEE, 0xE3, 0xDD, 0xC7, 0xBB, 0x8F, 0x77, 0x1E, 0xEF, 0x3D, 0xDE,  //    %)     w    = {x        w  = 
0x7B, 0xBC, 0xF7, 0x78, 0xEE, 0xF1, 0xDE, 0x63, 0xC8, 0x2D, 0x36, 0x46, 0x50, 0x41, 0x41, 0x41, 0x4A, 0x47, 0x43, 0x4D, 0x45, 0x55, 0x36, 0x35, 0x32, 0x38, 0x31, 0x00, 0x2D, 0x04, 0x55, 0x36,  // {  x   c -6FPAAAJGCMEU65281 - U6
0x35, 0x32, 0x38, 0x31, 0x00, 0x00, 0x66, 0xE6, 0x90, 0xED, 0xA4, 0xA6, 0xFF, 0xFF, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0xA0, 0xFF, 0x0A, 0xFF, 0x25, 0xFF, 0x26, 0xFF, 0x12, 0x0D, 0x18, 0x00,  // 5281  f                 % &     
0x81, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x78, 0x78,
0x78, 0x4A, 0xA7, 0x95, 0xFF, 0x01, 0x1F, 0x02, 0x06, 0x06, 0x14, 0x03, 0x55, 0x55, 0x28, 0x05, 0x14, 0x58, 0x10, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x8B, 0x5A, 0x2B, 0x78, 0x03, 0x00, 0x54, 0xEB, 0x65, 0x03, 0x25, 0x03, 0x00, 0x03, 0xD3, 0x02, 0x7D, 0x02, 0x3F, 0x02, 0xE5, 0x01, 0xA9, 0x01, 0x4C, 0x01, 0x07, 0x01, 0x00, 0x00, 0xD2, 0x14,
0x28, 0x23, 0x79, 0x31, 0x20, 0x4E, 0xC0, 0x5D, 0x00, 0x7D, 0xA0, 0x8C, 0x40, 0x9C, 0xF8, 0xA7, 0x50, 0x64, 0x50, 0x96, 0xE0, 0x28, 0x31, 0x60, 0x94, 0x70, 0x00, 0x00, 0xA0, 0x0F, 0x40, 0x1F,
0xE0, 0x2E, 0x80, 0x3E, 0x20, 0x4E, 0xC0, 0x5D, 0x60, 0x6D, 0x00, 0x00, 0x65, 0x02, 0x0B, 0x05, 0x6B, 0x07, 0xCF, 0x09, 0x34, 0x0C, 0x98, 0x0E, 0xFD, 0x10, 0x02, 0x00, 0x50, 0x2D, 0x00, 0x00,
0x00, 0x14, 0x00, 0x1E, 0x00, 0x28, 0x00, 0x32, 0x00, 0x37, 0x00, 0x46, 0x00, 0x82, 0x00, 0x00, 0x00, 0x15, 0x00, 0x1F, 0x00, 0x29, 0x00, 0x33, 0x00, 0x38, 0x00, 0x47, 0x00, 0x83, 0x00, 0x00,
0x59, 0x03, 0x06, 0x05, 0xB2, 0x06, 0x5F, 0x08, 0x35, 0x09, 0xB8, 0x0B, 0xBE, 0x10, 0x04, 0x00, 0x58, 0x41, 0x20, 0x03, 0xAB, 0x03, 0xC1, 0x04, 0x14, 0x05, 0xC8, 0x05, 0xED, 0x05, 0x36, 0x06,
0x5E, 0x06, 0x00, 0x00, 0x0C, 0x01, 0x24, 0x03, 0xC4, 0x03, 0x2F, 0x04, 0x3B, 0x05, 0x53, 0x07, 0x5F, 0x08, 0x1E, 0x77, 0x20, 0x54, 0x00, 0x00, 0x1E, 0x01, 0xE2, 0x01, 0xA7, 0x02, 0x2F, 0x04,
0x06, 0x05, 0xB2, 0x06, 0x89, 0x07, 0x5F, 0x08, 0xB8, 0x08, 0xC4, 0x09, 0x10, 0x27, 0xC4, 0x09, 0xF4, 0x01, 0x70, 0x17, 0x94, 0x11, 0x90, 0xD0, 0x03, 0x00, 0x05, 0x00, 0xCF, 0x03, 0x0B, 0x0B,
0x0B, 0x0B, 0x76, 0xDD, 0x64, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x2F, 0x04, 0x5F, 0x08, 0xA0, 0x05, 0xC0, 0x08, 0xE0, 0x0B, 0x00, 0x00, 0x20, 0x03, 0x40, 0x06, 0xAF, 0x84, 0x3A, 0x42, 0x4C, 0x57,
0x64, 0x14, 0x2B, 0x42, 0x59, 0x6B, 0x7F, 0x26, 0x51, 0x82, 0xAD, 0xD1, 0xFF, 0x80, 0x9A, 0xBB, 0xDC, 0xFF, 0x03, 0x09, 0x10, 0x14, 0x17, 0x1A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x01, 0x09, 0x0E,
0x11, 0x13, 0x15, 0x66, 0x93, 0xBA, 0xD3, 0xE8, 0xFF, 0x26, 0x3D, 0x62, 0x9E, 0xFF, 0x5E, 0x01, 0xEF, 0xF0, 0x6E, 0xA6, 0xB2, 0xBC, 0xC2, 0xC6, 0xC2, 0xC2, 0xC2, 0xC2, 0xB0, 0x0D, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x12, 0x00, 0x01, 0x3B, 0xFB, 0xFF, 0x52, 0x00, 0x03, 0x00, 0x00, 0x4B, 0x64, 0x03, 0xFF,
0x52, 0x00, 0x03, 0x00, 0x00, 0x4B, 0x23, 0x03, 0xB0, 0x4F, 0xBD, 0x81, 0xF0, 0x00, 0x00, 0xFF, 0x98, 0x56, 0x0E, 0x6D, 0x97, 0x28, 0xC8, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x1A, 0xBB, 0x14, 0x01,
0x00, 0x28, 0x32, 0x5F, 0x6E, 0x95, 0x95, 0x95, 0x87, 0x87, 0x03, 0x87, 0x98, 0x32, 0x1E, 0x0A, 0x78, 0x00, 0x71, 0x03, 0x0F, 0x0F, 0x32, 0x19, 0x52, 0xAA, 0x52, 0x0A, 0x05, 0x78, 0x90, 0x01,
0x01, 0x6A, 0x78, 0x82, 0x78, 0xA0, 0x05, 0x8C, 0x0A, 0x00, 0x97, 0x76, 0xFC, 0x16, 0x64, 0x64, 0x5A, 0x00, 0x00, 0x14, 0x28, 0x3C, 0x50, 0x64, 0x78, 0x28, 0x19, 0x0F, 0x0A, 0x08, 0x07, 0x05,
0x00, 0x00, 0xD0, 0x02, 0x00, 0x64, 0x62, 0x3D, 0xEF, 0x11, 0x64, 0x64, 0x5A, 0x00, 0x00, 0x14, 0x28, 0x3C, 0x50, 0x64, 0x78, 0x28, 0x19, 0x0F, 0x0A, 0x08, 0x07, 0x05, 0x00, 0x00, 0xD0, 0x02,
0x00, 0x64, 0x8B, 0x49, 0x0A, 0x11, 0x64, 0x64, 0x5A, 0x00, 0x00, 0x14, 0x28, 0x3C, 0x50, 0x64, 0x78, 0x28, 0x19, 0x0F, 0x0A, 0x08, 0x07, 0x05, 0x00, 0x00, 0xD0, 0x02, 0x00, 0x64, 0x9F, 0x67,
0xFA, 0x11, 0x64, 0x64, 0x5A, 0x00, 0x00, 0x14, 0x28, 0x3C, 0x50, 0x64, 0x78, 0x28, 0x19, 0x0F, 0x0A, 0x08, 0x07, 0x05, 0x00, 0x00, 0xD0, 0x02, 0x00, 0x64, 0x85, 0x01, 0x5F, 0xA4, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

static unsigned short CODES [] = {
 0x0002,  0x1021,  0x2042,  0x3063,  0x4084,  0x50A5,  0x60C6,  0x70E7,
 0x8108,  0x9129,  0xA14A,  0xB16B,  0xC18C,  0xD1AD,  0xE1CE,  0xF1EF,
 0x1231,  0x0210,  0x3273,  0x2252,  0x52B5,  0x4294,  0x72F7,  0x62D6,
 0x9339,  0x8318,  0xB37B,  0xA35A,  0xD3BD,  0xC39C,  0xF3FF,  0xE3DE,
 0x2462,  0x3443,  0x0420,  0x1401,  0x64E6,  0x74C7,  0x44A4,  0x5485,
 0xA56A,  0xB54B,  0x8528,  0x9509,  0xE5EE,  0xF5CF,  0xC5AC,  0xD58D,
 0x3653,  0x2672,  0x1611,  0x0630,  0x76D7,  0x66F6,  0x5695,  0x46B4,
 0xB75B,  0xA77A,  0x9719,  0x8738,  0xF7DF,  0xE7FE,  0xD79D,  0xC7BC,
 0x48C4,  0x58E5,  0x6886,  0x78A7,  0x0840,  0x1861,  0x2802,  0x3823,
 0xC9CC,  0xD9ED,  0xE98E,  0xF9AF,  0x8948,  0x9969,  0xA90A,  0xB92B,
 0x5AF5,  0x4AD4,  0x7AB7,  0x6A96,  0x1A71,  0x0A50,  0x3A33,  0x2A12,
 0xDBFD,  0xCBDC,  0xFBBF,  0xEB9E,  0x9B79,  0x8B58,  0xBB3B,  0xAB1A,
 0x6CA6,  0x7C87,  0x4CE4,  0x5CC5,  0x2C22,  0x3C03,  0x0C60,  0x1C41,
 0xEDAE,  0xFD8F,  0xCDEC,  0xDDCD,  0xAD2A,  0xBD0B,  0x8D68,  0x9D49,
 0x7E97,  0x6EB6,  0x5ED5,  0x4EF4,  0x3E13,  0x2E32,  0x1E51,  0x0E70,
 0xFF9F,  0xEFBE,  0xDFDD,  0xCFFC,  0xBF1B,  0xAF3A,  0x9F59,  0x8F78,
 0x9188,  0x81A9,  0xB1CA,  0xA1EB,  0xD10C,  0xC12D,  0xF14E,  0xE16F,
 0x1080,  0x00A1,  0x30C2,  0x20E3,  0x5004,  0x4025,  0x7046,  0x6067,
 0x83B9,  0x9398,  0xA3FB,  0xB3DA,  0xC33D,  0xD31C,  0xE37F,  0xF35E,
 0x02B1,  0x1290,  0x22F3,  0x32D2,  0x4235,  0x5214,  0x6277,  0x7256,
 0xB5EA,  0xA5CB,  0x95A8,  0x8589,  0xF56E,  0xE54F,  0xD52C,  0xC50D,
 0x34E2,  0x24C3,  0x14A0,  0x0481,  0x7466,  0x6447,  0x5424,  0x4405,
 0xA7DB,  0xB7FA,  0x8799,  0x97B8,  0xE75F,  0xF77E,  0xC71D,  0xD73C,
 0x26D3,  0x36F2,  0x0691,  0x16B0,  0x6657,  0x7676,  0x4615,  0x5634,
 0xD94C,  0xC96D,  0xF90E,  0xE92F,  0x99C8,  0x89E9,  0xB98A,  0xA9AB,
 0x5844,  0x4865,  0x7806,  0x6827,  0x18C0,  0x08E1,  0x3882,  0x28A3,
 0xCB7D,  0xDB5C,  0xEB3F,  0xFB1E,  0x8BF9,  0x9BD8,  0xABBB,  0xBB9A,
 0x4A75,  0x5A54,  0x6A37,  0x7A16,  0x0AF1,  0x1AD0,  0x2AB3,  0x3A92,
 0xFD2E,  0xED0F,  0xDD6C,  0xCD4D,  0xBDAA,  0xAD8B,  0x9DE8,  0x8DC9,
 0x7C26,  0x6C07,  0x5C64,  0x4C45,  0x3CA2,  0x2C83,  0x1CE0,  0x0CC1,
 0xEF1F,  0xFF3E,  0xCF5D,  0xDF7C,  0xAF9B,  0xBFBA,  0x8FD9,  0x9FF8,
 0x6E17,  0x7E36,  0x4E55,  0x5E74,  0x2E93,  0x3EB2,  0x0ED1,  0x1EF0
 };

static unsigned short Checksum(unsigned char * data, short len) {
  unsigned char c;
  unsigned short res;
  
  res = 0;
  for (; len != 0; len--) {
    c = *data++;
    res = (res << 8 ^ (unsigned int)(CODES [(res >> 8 ^ (unsigned int)c)]));
  }
  return res;
}

typedef struct eep_tag {
    unsigned short addr;
    unsigned char  len;
    unsigned char  chk;
} eep;

static char data [64];

static eep eeprom [] = {
    { 0x0000, 0x02, 0x00 },
    { 0x0002, 0x26, 0x00 },
    { 0x0028, 0x14, 0x01 },
    { 0x003c, 0x0a, 0x01 },
    { 0x0046, 0x08, 0x01 },
    { 0x004e, 0x12, 0x00 },
    { 0x0060, 0x1c, 0x00 },
    { 0x007c, 0x02, 0x00 },
    { 0x007e, 0x04, 0x00 },
    { 0x0082, 0x08, 0x01 },
    { 0x008a, 0x1c, 0x00 },
    { 0x00a6, 0x32, 0x01 },
    { 0x00d8, 0x24, 0x01 },
    { 0x00fc, 0x34, 0x01 },
    { 0x0130, 0x24, 0x01 },
    { 0x0154, 0x2e, 0x01 },
    { 0x0182, 0x18, 0x01 },
    { 0x019a, 0x36, 0x01 },
    { 0x01d0, 0x0c, 0x01 },
    { 0x01dc, 0x14, 0x01 },
    { 0x01f0, 0x04, 0x01 },
    { 0x01f4, 0x14, 0x01 },
    { 0x0208, 0x02, 0x00 },
    { 0x020a, 0x06, 0x01 },
    { 0x0210, 0x04, 0x00 },
    { 0x0214, 0x06, 0x01 },
    { 0x021a, 0x02, 0x00 },
    { 0x021c, 0x2e, 0x01 },
    { 0x024a, 0x1c, 0x01 },
    { 0x0266, 0x1c, 0x01 },
    { 0x0282, 0x1c, 0x01 },
    { 0x029e, 0x1c, 0x01 },
    { 0x02ba, 0x04, 0x00 },
};

static void fixChecksums () {
    unsigned char * dat = (unsigned char *)&(data [0]);
    unsigned short c;
    unsigned short d;
    unsigned int i;
    unsigned int j;
    unsigned int f = 0;

    Serial.print ("Fixing Checksums...\n");
    i = 0;
    while (i < sizeof (eeprom) / sizeof (eep)) {
        if (eeprom [i].chk) {
            j = 0;
            for (uint16_t addr = eeprom [i].addr; addr < eeprom [i].addr + eeprom [i].len; addr++) {
                dat [j++] = i2c_eeprom_read_byte(0x50, addr);
            }
            c = Checksum (&(dat [2]), eeprom [i].len - 2);
            d = dat [0] | (dat [1] << 8); // Current

            sprintf (data, "0x%03X (%02d) : 0x%04X == 0x%04X ", eeprom [i].addr, eeprom [i].len - 2, c, d);
            Serial.print (data);
            if (c == d)
                Serial.print ("(Good)");
            else {
                Serial.print ("(Bad...");
                f++;
                i2c_eeprom_write_byte(0x50, eeprom [i].addr + 0, c &  0xFF); delay(5);
                i2c_eeprom_write_byte(0x50, eeprom [i].addr + 1, c >> 0x08); delay(5);

                dat [0] = i2c_eeprom_read_byte(0x50, eeprom [i].addr + 0);
                dat [1] = i2c_eeprom_read_byte(0x50, eeprom [i].addr + 1);
                d = dat [0] | (dat [1] << 8); // Current
                if (c == d)
                    Serial.print ("Fixed)");
                else
                    Serial.print ("Error)");
            }
            Serial.print ("\n");
        }
        i++;
    }
    sprintf (data, "Done, %d needed to be fixed.\n\n", f);
    Serial.print (data);
}

byte i2c_eeprom_read_byte(uint8_t deviceaddress, uint16_t eeaddress ) {
    byte rdata = 0xFF;
#if (ADDRESS_SIZE == 16)
    Wire.beginTransmission(deviceaddress);
    Wire.write((eeaddress >> 8)); // MSB
#else
    deviceaddress |= (eeaddress >> 8);
    Wire.beginTransmission(deviceaddress); // MSB
#endif
    Wire.write(eeaddress); // LSB
    Wire.endTransmission();
    Wire.requestFrom(deviceaddress, (uint8_t)1);
    while (!Wire.available()); 
    rdata = Wire.read();
    return rdata;
}

void i2c_eeprom_write_byte(uint8_t deviceaddress, uint16_t eeaddress, byte data ) {
#if (ADDRESS_SIZE == 16)
    Wire.beginTransmission(deviceaddress);
    Wire.write((eeaddress >> 8)); // MSB
#else
    deviceaddress |= (eeaddress >> 8);
    Wire.beginTransmission(deviceaddress); // MSB
#endif
    Wire.write((byte)eeaddress); // LSB
    Wire.write((byte)data);
    Wire.endTransmission();
}
  
void text (int l) {
    int i = 0;

    //return; // Not needed all the time

    if (i < l)
        Serial.print(" // ");
    while (i < l) {
        if ((data [i] >= ' ') && (data [i] <= '~'))
            Serial.print (data [i]);
        else
            Serial.print (" ");
        i++;
    }
}
  
void setup() {
    int i = 0;

    Wire.begin(); // initialise the EEPROM connection
    Serial.begin(115200);
    Serial.println(F("EEPROM WRITER/READER"));
    Serial.println(F("Hit any key & return to start"));
    while (!Serial.available());
    Serial.println("Starting");

    if (WRITE) {
        byte b;
        for (uint16_t addr = 0; addr < EEPROMSIZE2; addr++) {
            if (addr < sizeof(eepromdat)) {
                b = pgm_read_byte(eepromdat+addr);
            } else {
                b = 0xFF;
            }
            i2c_eeprom_write_byte(0x50, addr, b);
            delay(5);
            if ((addr % 32) == 0)
                Serial.println();
            Serial.print("0x");
            if (b < 0x10)
                Serial.print('0');
            Serial.print(b, HEX); //print content to serial port
            Serial.print(", ");
        }
        Serial.println("\n\r========\n\rFinished!");
    }

    if (RESET) {
        i2c_eeprom_write_byte(0x50, 0x006, 0x00); delay(5);
      //i2c_eeprom_write_byte(0x50, 0x208, 0x00); delay(5);
      //i2c_eeprom_write_byte(0x50, 0x209, 0xFF); delay(5);
    }
    fixChecksums ();

    for (uint16_t addr = 0x000; addr < EEPROMSIZE3; addr++) {
        uint8_t d =  i2c_eeprom_read_byte(0x50, addr);
        Serial.print("0x");
        if (d < 0x10) Serial.print('0');
        Serial.print(d, HEX); //print content to serial port
        Serial.print(", ");
        data [i++] = d;
        if (i == 32) {
            text (i);
            i = 0;
            Serial.println();
        }
    }
    text (i);
    Serial.println();
}

void loop() {
}
