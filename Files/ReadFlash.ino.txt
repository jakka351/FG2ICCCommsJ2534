// Manipulate an FG2 Cluster's MCU Flash memory

/*
WIRES:

Blue   : FLMD0
Purple : *RESET

Yellow : RXDA0
Green  : TXDA0

*/

#define WRITE 0 // Set to 1 to erase & write before doing the verify

#include <Arduino.h>

#define SOH             1
#define STX             2
#define ETX             3
#define ETB             0x17
#define ACK             6
#define NAK             0x15

#define CMD_RESET       0x00
#define CMD_STATUS      0x70
#define CMD_FREQ_SET    0x90
#define CMD_BAUD_SET    0x9A

#define CMD_VERIFY      0x13
#define CMD_CHIP_ERASE  0x20
#define CMD_BLOCK_ERASE 0x22
#define CMD_BLK_BLANK   0x32
#define CMD_PROGRAM     0x40
#define CMD_READ        0x50
#define CMD_SECUR_SET   0xA0
#define CMD_CHECKSUM    0xB0

#define BLOCKSIZE 0x01000
#define FLASHSIZE 0x80000

static uint32_t iBps, Bps; /* 3:9600, 4:19200, 5:31250, 6:38400, 7:76800, 8:153600 */
static uint32_t Freq;      /* Input clock frequency [kHz] */

static uint32_t ReadTimeout = 200;

unsigned char dat0 [] = { // To-Clone-To-Unit: 6FPAAAJGCMEU65281
0xFC, 0x59, 0xA1, 0x00, 0x01, 0x00, 0xFC, 0x06, 0x04, 0x02, 0x47, 0x02, 0x02, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA1, 0x00, 0x00, 0x3B, 
0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x01, 0xF2, 0x50, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x02, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00, 0x00,

0x57, 0x34, 0x31, 0x82, 0x73, 0x71, 0x30, 0x30, 0x35, 0x0D, 0x0A, 0x36, 0x46, 0x50, 0x41, 0x41, 
0x41, 0x4A, 0x47, 0x43, 0x4D, 0x45, 0x55, 0x36, 0x35, 0x32, 0x38, 0x31, 0x00, 0x0D, 0x0A, 0x00, 
0x00, 0x0D, 0x0A, 0x00, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x0D, 0x0A, 0x00, 
0x00, 0x0D, 0x0A, 0x00, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x00
};

static uint8_t CodeBuff [4096];

static char data [32];

static void ReadSerial1 (uint8_t * s, uint32_t l, uint32_t * r) {
    uint32_t i = 0;
    uint32_t t = millis ();

    while (i < l) {
        while ((i < l) && (Serial1.available ())) {
            s [i++] = Serial1.read ();
        }
        if ((i < l) && (millis () - t > ReadTimeout))
            break;
    }
    *r = i;
}

static void WriteSerial1 (const uint8_t * s, uint32_t l, uint32_t * r) {
    uint32_t i = 0;
    while (i < l)
        Serial1.write (s [i++]);
    *r = i;
}

static void send_frame (uint8_t header, uint8_t footer, const uint8_t* buffer, uint32_t count) {
    uint8_t n, s[2];
    uint32_t wc;


    /* Flush receiving buffer */
    ReadTimeout = 0;
    do
        ReadSerial1(s, 2, &wc);
    while (wc == 2);

    s[0] = header; s[1] = (uint8_t)count;            /* STX|ETX and data count */
    WriteSerial1(s, 2, &wc);

    WriteSerial1(buffer, count, &wc);    /* data */

    n = 0 - (uint8_t)count;                        /* Sum */
    do
        n -= *buffer++;
    while (--count);

    s[0] = n; s[1] = footer;                /* Sum and ETB|ETX */
    WriteSerial1(s, 2, &wc);
}

static int recv_frame (uint8_t *buff, uint32_t lbuff, uint32_t tmr) {
    uint8_t d[2], sum;
    uint32_t rd, len, n;

    ReadTimeout = tmr;    /* Set timeout value */
    ReadSerial1(d, 2, &rd);                 /* Get Heder and Length */
    if (rd != 2 || d[0] != STX || !d[1]) return 0;
    len = d[1];
    if (len != lbuff) return 0;

    ReadSerial1(buff, len, &rd);            /* Get Data */
    if (rd != len) return 0;

    ReadSerial1(d, 2, &rd);                 /* Get Sum and Footer */
    if (rd != 2 || d[1] != ETX) return 0;

    sum = 0 - (uint8_t)len;                    /* Check sum error */
    for (n = 0; n < len; n++) sum -= buff[n];
    if (sum != d[0]) return 0;

    return 1;
}

static int recv_data (uint8_t *buff, uint32_t lbuff, uint32_t tmr) {
    uint8_t d[2], sum;
    uint32_t rd, len, n;

    ReadTimeout = tmr;    /* Set timeout value */
    ReadSerial1(d, 2, &rd);                 /* Get Heder and Length */
    if (rd != 2 || d[0] != STX) return 0;
    len = d[1];
    if (len == 0) len = 256; // zero is 256
    if (len > lbuff) return 0;

    ReadSerial1(buff, len, &rd);            /* Get Data */
    if (rd != len) return 0;

    ReadSerial1(d, 2, &rd);                 /* Get Sum and Footer */
    if (rd != 2 || ((d[1] != ETX) && (d[1] != ETB))) return 0;

    sum = 0 - (uint8_t)len;                    /* Check sum error */
    for (n = 0; n < len; n++) sum -= buff[n];
    if (sum != d[0]) return 0;

    return len;
}

static int boot (void) {
    uint8_t buf[6];
    uint32_t n;
    int stat = -2;

    /* Release device RESET */
    //?
    delay (250);                     /* Delay 250ms */

    /* Bit rate synchronization */
    Serial.println("Sync...");
    buf[0] = 0;
    WriteSerial1(buf, 1, &n);        /* Send a 0x00 */
    delay (50);                      /* 50ms */
    WriteSerial1(buf, 1, &n);        /* Send a 0x00 */

    /* RESET command */
    for (n = 16; n; n--) {
        delay (50);                            /* 50ms */
        buf[0] = CMD_RESET;
        send_frame(SOH, ETX, buf, 1);
        if (recv_frame(buf, 1, 100) && buf[0] == ACK) break;
    }
    if (!n) goto boot_fail;

    /* Set frequency if specified */
    if (Freq) {
        Serial.println("Freq...");
        buf[0] = CMD_FREQ_SET;
        for (n = 3; Freq > 999; Freq/=10, n++);
        buf[4] = (uint8_t)n;
        buf[3] = (uint8_t)(Freq % 10); Freq /=10;
        buf[2] = (uint8_t)(Freq % 10); Freq /=10;
        buf[1] = (uint8_t)Freq;
        send_frame(SOH, ETX, buf, 5);
        if (!recv_frame(buf, 1, 100)) { stat = -1; goto boot_fail; }
        if (buf[0] != ACK) { stat = buf[0]; goto boot_fail; }
    }

    /* Set baud rate if specified */
    //    3,     4,     5,     6,     7,      8
    // 9600, 19200, 31250, 38400, 76800, 153600
    if (Bps) {
        Serial.println("Baud...");
        buf[0] = CMD_BAUD_SET;
        buf[1] = (uint8_t)iBps;
        send_frame(SOH, ETX, buf, 2);
        delay (30);
        Serial1.begin (Bps);
        delay (30);
        buf[0] = CMD_RESET;
        send_frame(SOH, ETX, buf, 1);
        if (!recv_frame(buf, 1, 100)) { stat = -1; goto boot_fail; }
        if (buf[0] != ACK) { stat = buf[0]; goto boot_fail; }
    }

    Serial.println("OK.");
    return 0;

boot_fail:
    Serial.printf("failed(%d).\n", stat);        
    return 3;
}

static void text (int l) {
    int i = 0;
    if (i < l)
        Serial.print(" // ");
    while (i < l) {
        if ((data [i] >= ' ') && (data [i] <= '~'))
            Serial.print (data [i]);
        else
            Serial.print (" ");
        i++;
    }
}

static void printBuf () {
    uint8_t d;
    int i = 0;
    int j = 0;
    int l = 256;
    
    while (l) {
        d = CodeBuff [j++];
        Serial.print("0x");
        if (d < 0x10) Serial.print('0');
        Serial.print(d, HEX); //print content to serial port
        Serial.print(", ");
        data [i++] = d;
        if (i == 32) {
          text (i);
          i = 0;
          Serial.println();
        }
        l--;
    }
}

static int readFlash (void) {
    uint8_t buf[8];
    uint32_t addr, a, c;
    int stat = 0;
    int retry = 0;

    for (addr = 0; addr < FLASHSIZE; addr += BLOCKSIZE) {
        c = BLOCKSIZE;

        // Read block data
        Serial.printf("// Reading %06X-%06X...\n", addr, addr + c);
        buf[0] = CMD_READ;
        buf[1] = (uint8_t)(addr >> 16);
        buf[2] = (uint8_t)(addr >> 8);
        buf[3] = (uint8_t)(addr);
        buf[4] = (uint8_t)((addr + c - 1) >> 16);
        buf[5] = (uint8_t)((addr + c - 1) >> 8);
        buf[6] = (uint8_t)((addr + c - 1));
        send_frame(SOH, ETX, buf, 7);
        if (!recv_frame(buf, 1, 100)) { stat = -1; goto read_fail; }
        if (buf[0] != ACK) { stat = buf[0]; goto read_fail; }

        for (a = addr; c; a += 256, c -= 256) {
retryjmp:
            if (recv_data (CodeBuff, 256, 500) == 256) {
                retry = 0;
                printBuf ();
                buf [0] = ACK;
                send_frame (STX, ETX, buf, 1);
            } else {
                if (++retry >= 5) {
                    stat = -256;
                    goto read_fail;
                } else {
                    buf [0] = NAK;
                    send_frame (STX, ETX, buf, 1);
                    goto retryjmp;
                }
            }
        }
    }
    return 0;

read_fail:
    Serial.printf ("Failed(%d).\n", stat);
    return 3;
}

static int eraseFlash (void) {
    uint8_t buf[8];
    uint32_t addr, c;
    int stat = 0;

    addr = 0x7F000;
    c = BLOCKSIZE;

    buf[0] = CMD_BLOCK_ERASE;
    buf[1] = (uint8_t)(addr >> 16);
    buf[2] = (uint8_t)(addr >> 8);
    buf[3] = (uint8_t)(addr);
    buf[4] = (uint8_t)((addr + c - 1) >> 16);
    buf[5] = (uint8_t)((addr + c - 1) >> 8);
    buf[6] = (uint8_t)((addr + c - 1));
    send_frame(SOH, ETX, buf, 7);
    if (!recv_frame(buf, 1, 100)) { stat = -1; goto comp_fail; }
    if (buf[0] != ACK) { stat = buf[0]; goto comp_fail; }
    Serial.printf ("%08X: %02X\n", addr, buf[0]);

    return 0;

comp_fail:
    Serial.printf("failed(%d).\n", stat);
    return stat;
}

static int writeFlash (void) { // Only allowing one area to be written!
    uint8_t buf[8];
    uint32_t addr, a, c;
    int stat = 0;
    int r;

    addr = 0x7F000;
    c = BLOCKSIZE;

    buf[0] = CMD_PROGRAM;
    buf[1] = (uint8_t)(addr >> 16);
    buf[2] = (uint8_t)(addr >> 8);
    buf[3] = (uint8_t)(addr);
    buf[4] = (uint8_t)((addr + c - 1) >> 16);
    buf[5] = (uint8_t)((addr + c - 1) >> 8);
    buf[6] = (uint8_t)((addr + c - 1));
    send_frame(SOH, ETX, buf, 7);
    if (!recv_frame(buf, 1, 100)) { stat = -1; goto comp_fail; }
    if (buf[0] != ACK) { stat = buf[0]; goto comp_fail; }

    for (a = 0; c; a += 256, c -= 256) {
        send_frame(STX, (uint8_t)((c > 256) ? ETB : ETX), &(CodeBuff [a]), 256);
        r = recv_frame(buf, 2, 100);
        if (!r) { stat = -1; goto comp_fail; }
        if (buf[0] != ACK || buf[1] != ACK) { stat = buf[1]; goto comp_fail; }
        Serial.printf ("%08X: %02X %02X (All-Good)\n", addr + a, buf[0], buf[1]);
    }

    return 0;

comp_fail:
    Serial.printf("failed(%d).\n", stat);
    return stat;
}

static int verifyFlash (void) {
    uint8_t buf[8];
    uint32_t addr, a, c;
    int stat = 0;
    int r;

    addr = 0x7F000;
    c = BLOCKSIZE;

    buf[0] = CMD_VERIFY;
    buf[1] = (uint8_t)(addr >> 16);
    buf[2] = (uint8_t)(addr >> 8);
    buf[3] = (uint8_t)(addr);
    buf[4] = (uint8_t)((addr + c - 1) >> 16);
    buf[5] = (uint8_t)((addr + c - 1) >> 8);
    buf[6] = (uint8_t)((addr + c - 1));
    send_frame(SOH, ETX, buf, 7);
    if (!recv_frame(buf, 1, 100)) { stat = -1; goto comp_fail; }
    if (buf[0] != ACK) { stat = buf[0]; goto comp_fail; }

    for (a = 0; c; a += 256, c -= 256) {
        send_frame(STX, (uint8_t)((c > 256) ? ETB : ETX), &(CodeBuff [a]), 256);
        r = recv_frame(buf, 2, 100);
        if (!r) { stat = -1; goto comp_fail; }
        if (buf[0] != ACK || buf[1] != ACK) { stat = buf[1]; goto comp_fail; }
        Serial.printf ("%08X: %02X %02X (All-Good)\n", addr + a, buf[0], buf[1]);
    }

    return 0;

comp_fail:
    Serial.printf("failed(%d).\n", stat);
    return stat;
}

static int checkFlash (void) {
    uint8_t buf[8];
    uint32_t addr, c;
    int stat = 0;
    int i = 0;

    for (addr = 0; addr < FLASHSIZE; addr += BLOCKSIZE) {
        c = BLOCKSIZE;

        buf[0] = CMD_BLK_BLANK;
        buf[1] = (uint8_t)(addr >> 16);
        buf[2] = (uint8_t)(addr >> 8);
        buf[3] = (uint8_t)(addr);
        buf[4] = (uint8_t)((addr + c - 1) >> 16);
        buf[5] = (uint8_t)((addr + c - 1) >> 8);
        buf[6] = (uint8_t)((addr + c - 1));
        send_frame(SOH, ETX, buf, 7);
        if (!recv_frame(buf, 1, 100)) { stat = -1; goto comp_fail; }
        //if (buf[0] != ACK) { stat = buf[0]; goto comp_fail; }
        Serial.printf ("%08X: %02X  ", addr, buf[0]);
        if (++i == 4) {
            i = 0;
            Serial.printf ("\n");
        }
    }
    return 0;

comp_fail:
    Serial.printf("failed(%d).\n", stat);
    return stat;
}

static int checkSumFlash (void) {
    uint8_t buf[8];
    uint32_t addr, c;
    int stat = 0;

#define CHECKSUMSIZE 512 // FYI - 256 is the smallest chunk allowed

    for (addr = 0x7F000; addr < FLASHSIZE; addr += CHECKSUMSIZE) {
        c = CHECKSUMSIZE;

        buf[0] = CMD_CHECKSUM;
        buf[1] = (uint8_t)(addr >> 16);
        buf[2] = (uint8_t)(addr >> 8);
        buf[3] = (uint8_t)(addr);
        buf[4] = (uint8_t)((addr + c - 1) >> 16);
        buf[5] = (uint8_t)((addr + c - 1) >> 8);
        buf[6] = (uint8_t)((addr + c - 1));
        send_frame(SOH, ETX, buf, 7);
        if (!recv_frame(buf, 1, 100)) { stat = -1; goto comp_fail; }
        if (buf[0] != ACK) { stat = buf[0]; goto comp_fail; }

        if (recv_data (buf, 2, 500) == 2) {
            Serial.printf ("%08X: %02X %02X\n", addr, buf[0], buf[1]);
        }
    }
    return 0;

comp_fail:
    Serial.printf("failed(%d).\n", stat);
    return stat;
}

void setup () {
    int rc;

    delay (2500);

    //Bps = 0; // No change from default
    //iBps = 3;

    //Bps = 38400;
    //iBps = 6;

    Bps = 153600; // Fastest BAUD supported via testing
    iBps = 8;

    Freq = 4000; // 4MHz as per the doco

restart:
    Serial.begin (115200);
    Serial.println ("FLASH READER");
    Serial.println ("Hit return to start (s = skip init)");
    while (!Serial.available ());
    rc = 0;
    while (Serial.available ()) {
        if (Serial.read() == 's') // skip initialisation!
            rc = 1;
    }
    if (rc) {
        if (Bps)
            Serial1.begin (Bps);
        else
            Serial1.begin (9600);
        goto restart2;
    } else
        Serial1.begin (9600);

    Serial.println ("Starting");

    while (Serial1.available ()) {
        Serial1.read();
    }
    rc = boot();
    if (!rc) {
        Serial.println ("Boot OK");
restart2:
        Serial.println ("Hit return to proceed (q = restart)");
        while (!Serial.available ());
        rc = 0;
        while (Serial.available ()) {
            if (Serial.read() == 'q')
                rc = 1;
        }
        if (rc)
            goto restart;
            
        memset (CodeBuff, 0xFF, 0x1000);
        memcpy (CodeBuff, dat0, sizeof (dat0));
        if (WRITE) {
            Serial.println ("Erasing");
            if (eraseFlash () == 0) {
                Serial.println ("Writing");
                writeFlash ();
            }
        }
        // Try verifying supplied data
        Serial.println ("Verifying");
        verifyFlash ();
        goto restart2; // Not interested in doing checksums

        // Try getting checksums
        Serial.println ("Reading");
        checkSumFlash ();
        goto restart2; // Not interested in doing reads/used-blocks

        // Try reading, then checking used blocks
        readFlash ();
        checkFlash ();
        goto restart2;

    } else {
        Serial.println ("Flash PGM Boot failed");
    }
    goto restart;
}

void loop () {
}
