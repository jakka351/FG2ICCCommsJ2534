#include <Wire.h> //I2C library

#define WRITE 0 // Set to 1 to write new data before reading

#define EEPROMSIZE 2048UL
#define ADDRESS_SIZE 8

const uint8_t PROGMEM eepromdat [EEPROMSIZE] = {
0x09, 0x00, 0xBC, 0x25, 0x29, 0x0A, 0x00, 0x00, 0xBB, 0xC7, 0x77, 0x8F, 0xEF, 0x1E, 0xDE, 0x3D, 0xBC, 0x7B, 0x78, 0xF7, 0xF1, 0xEE, 0xE3, 0xDD, 0xC7, 0xBB, 0x8F, 0x77, 0x1E, 0xEF, 0x3D, 0xDE,  //    %)     w    = {x        w  = 
0x7B, 0xBC, 0xF7, 0x78, 0xEE, 0xF1, 0xDE, 0x63, 0xC8, 0x2D, 0x36, 0x46, 0x50, 0x41, 0x41, 0x41, 0x4A, 0x47, 0x43, 0x4D, 0x45, 0x55, 0x36, 0x35, 0x32, 0x38, 0x31, 0x00, 0x2D, 0x04, 0x55, 0x36,  // {  x   c -6FPAAAJGCMEU65281 - U6
0x35, 0x32, 0x38, 0x31, 0x00, 0x00, 0x66, 0xE6, 0x90, 0xED, 0xA4, 0xA6, 0xFF, 0xFF, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0xA0, 0xFF, 0x0A, 0xFF, 0x25, 0xFF, 0x26, 0xFF, 0x12, 0x0D, 0x18, 0x00,  // 5281  f                 % &     
0x81, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x78, 0x78,  //                               xx
0x78, 0x4A, 0xA7, 0x95, 0xFF, 0x01, 0x1F, 0x02, 0x06, 0x06, 0x14, 0x03, 0x55, 0x55, 0x28, 0x05, 0x14, 0x58, 0x10, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // xJ          UU(  X              
0x8B, 0x5A, 0x2B, 0x78, 0x03, 0x00, 0x54, 0xEB, 0x65, 0x03, 0x25, 0x03, 0x00, 0x03, 0xD3, 0x02, 0x7D, 0x02, 0x3F, 0x02, 0xE5, 0x01, 0xA9, 0x01, 0x4C, 0x01, 0x07, 0x01, 0x00, 0x00, 0xD2, 0x14,  //  Z+x  T e %     } ?     L       
0x28, 0x23, 0x79, 0x31, 0x20, 0x4E, 0xC0, 0x5D, 0x00, 0x7D, 0xA0, 0x8C, 0x40, 0x9C, 0xF8, 0xA7, 0x50, 0x64, 0x50, 0x96, 0xE0, 0x28, 0x31, 0x60, 0x94, 0x70, 0x00, 0x00, 0xA0, 0x0F, 0x40, 0x1F,  // (#y1 N ] }  @   PdP  (1` p    @ 
0xE0, 0x2E, 0x80, 0x3E, 0x20, 0x4E, 0xC0, 0x5D, 0x60, 0x6D, 0x00, 0x00, 0x65, 0x02, 0x0B, 0x05, 0x6B, 0x07, 0xCF, 0x09, 0x34, 0x0C, 0x98, 0x0E, 0xFD, 0x10, 0x02, 0x00, 0x50, 0x2D, 0x00, 0x00,  //  . > N ]`m  e   k   4       P-  
0x00, 0x14, 0x00, 0x1E, 0x00, 0x28, 0x00, 0x32, 0x00, 0x37, 0x00, 0x46, 0x00, 0x82, 0x00, 0x00, 0x00, 0x15, 0x00, 0x1F, 0x00, 0x29, 0x00, 0x33, 0x00, 0x38, 0x00, 0x47, 0x00, 0x83, 0x00, 0x00,  //      ( 2 7 F         ) 3 8 G    
0x59, 0x03, 0x06, 0x05, 0xB2, 0x06, 0x5F, 0x08, 0x35, 0x09, 0xB8, 0x0B, 0xBE, 0x10, 0x04, 0x00, 0x58, 0x41, 0x20, 0x03, 0xAB, 0x03, 0xC1, 0x04, 0x14, 0x05, 0xC8, 0x05, 0xED, 0x05, 0x36, 0x06,  // Y     _ 5       XA            6 
0x5E, 0x06, 0x00, 0x00, 0x0C, 0x01, 0x24, 0x03, 0xC4, 0x03, 0x2F, 0x04, 0x3B, 0x05, 0x53, 0x07, 0x5F, 0x08, 0x1E, 0x77, 0x20, 0x54, 0x00, 0x00, 0x1E, 0x01, 0xE2, 0x01, 0xA7, 0x02, 0x2F, 0x04,  // ^     $   / ; S _  w T        / 
0x06, 0x05, 0xB2, 0x06, 0x89, 0x07, 0x5F, 0x08, 0xB8, 0x08, 0xC4, 0x09, 0x10, 0x27, 0xC4, 0x09, 0xF4, 0x01, 0x70, 0x17, 0x94, 0x11, 0x90, 0xD0, 0x03, 0x00, 0x05, 0x00, 0xCF, 0x03, 0x0B, 0x0B,  //       _      '    p             
0x0B, 0x0B, 0x76, 0xDD, 0x64, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x2F, 0x04, 0x5F, 0x08, 0xA0, 0x05, 0xC0, 0x08, 0xE0, 0x0B, 0x00, 0x00, 0x20, 0x03, 0x40, 0x06, 0xAF, 0x84, 0x3A, 0x42, 0x4C, 0x57,  //   v d     / _           @   :BLW
0x64, 0x14, 0x2B, 0x42, 0x59, 0x6B, 0x7F, 0x26, 0x51, 0x82, 0xAD, 0xD1, 0xFF, 0x80, 0x9A, 0xBB, 0xDC, 0xFF, 0x03, 0x09, 0x10, 0x14, 0x17, 0x1A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x01, 0x09, 0x0E,  // d +BYk &Q                       
0x11, 0x13, 0x15, 0x66, 0x93, 0xBA, 0xD3, 0xE8, 0xFF, 0x26, 0x3D, 0x62, 0x9E, 0xFF, 0x5E, 0x01, 0xEF, 0xF0, 0x6E, 0xA6, 0xB2, 0xBC, 0xC2, 0xC6, 0xC2, 0xC2, 0xC2, 0xC2, 0xB0, 0x0D, 0x00, 0x00,  //    f     &=b  ^   n             
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x12, 0x00, 0x01, 0x3B, 0xFB, 0xFF, 0x52, 0x00, 0x03, 0x00, 0x00, 0x4B, 0x64, 0x03, 0xFF,  //                 !   ;  R    Kd  
0x52, 0x00, 0x03, 0x00, 0x00, 0x4B, 0x23, 0x03, 0xB0, 0x4F, 0xBD, 0x81, 0xF0, 0x00, 0x00, 0xFF, 0x98, 0x56, 0x0E, 0x6D, 0x97, 0x28, 0xC8, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x1A, 0xBB, 0x14, 0x01,  // R    K#  O       V m (          
0x00, 0x28, 0x32, 0x5F, 0x6E, 0x95, 0x95, 0x95, 0x87, 0x87, 0x03, 0x87, 0x98, 0x32, 0x1E, 0x0A, 0x78, 0x00, 0x71, 0x03, 0x0F, 0x0F, 0x32, 0x19, 0x52, 0xAA, 0x52, 0x0A, 0x05, 0x78, 0x90, 0x01,  //  (2_n        2  x q   2 R R  x  
0x01, 0x6A, 0x78, 0x82, 0x78, 0xA0, 0x05, 0x8C, 0x0A, 0x00, 0x97, 0x76, 0xFC, 0x16, 0x64, 0x64, 0x5A, 0x00, 0x00, 0x14, 0x28, 0x3C, 0x50, 0x64, 0x78, 0x28, 0x19, 0x0F, 0x0A, 0x08, 0x07, 0x05,  //  jx x      v  ddZ   (<Pdx(      
0x00, 0x00, 0xD0, 0x02, 0x00, 0x64, 0x62, 0x3D, 0xEF, 0x11, 0x64, 0x64, 0x5A, 0x00, 0x00, 0x14, 0x28, 0x3C, 0x50, 0x64, 0x78, 0x28, 0x19, 0x0F, 0x0A, 0x08, 0x07, 0x05, 0x00, 0x00, 0xD0, 0x02,  //      db=  ddZ   (<Pdx(          
0x00, 0x64, 0x8B, 0x49, 0x0A, 0x11, 0x64, 0x64, 0x5A, 0x00, 0x00, 0x14, 0x28, 0x3C, 0x50, 0x64, 0x78, 0x28, 0x19, 0x0F, 0x0A, 0x08, 0x07, 0x05, 0x00, 0x00, 0xD0, 0x02, 0x00, 0x64, 0x9F, 0x67,  //  d I  ddZ   (<Pdx(           d g
0xFA, 0x11, 0x64, 0x64, 0x5A, 0x00, 0x00, 0x14, 0x28, 0x3C, 0x50, 0x64, 0x78, 0x28, 0x19, 0x0F, 0x0A, 0x08, 0x07, 0x05, 0x00, 0x00, 0xD0, 0x02, 0x00, 0x64, 0x85, 0x01, 0x5F, 0xA4, 0xFF, 0xFF,  //   ddZ   (<Pdx(           d  _   
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //                                 
};

byte i2c_eeprom_read_byte(uint8_t deviceaddress, uint16_t eeaddress ) {
    byte rdata = 0xFF;
#if (ADDRESS_SIZE == 16)
    Wire.beginTransmission(deviceaddress);
    Wire.write((eeaddress >> 8)); // MSB
#else
    deviceaddress |= (eeaddress >> 8);
    Wire.beginTransmission(deviceaddress); // MSB
#endif
    Wire.write(eeaddress); // LSB
    Wire.endTransmission();
    Wire.requestFrom(deviceaddress, (uint8_t)1);
    while (!Wire.available()); 
    rdata = Wire.read();
    return rdata;
}

void i2c_eeprom_write_byte(uint8_t deviceaddress, uint16_t eeaddress, byte data ) {
#if (ADDRESS_SIZE == 16)
    Wire.beginTransmission(deviceaddress);
    Wire.write((eeaddress >> 8)); // MSB
#else
    deviceaddress |= (eeaddress >> 8);
    Wire.beginTransmission(deviceaddress); // MSB
#endif
    Wire.write((byte)eeaddress); // LSB
    Wire.write((byte)data);
    Wire.endTransmission();
}
  
char data [32];

void text (int l) {
    int i = 0;
    if (i < l)
        Serial.print(" // ");
    while (i < l) {
        if ((data [i] >= ' ') && (data [i] <= '~'))
            Serial.print (data [i]);
        else
            Serial.print (" ");
        i++;
    }
}
  
void setup() {
    int i = 0;

    Wire.begin(); // initialise the EEPROM connection
    Serial.begin(115200);
    Serial.println(F("EEPROM WRITER/READER"));
    Serial.println(F("Hit any key & return to start"));
    while (!Serial.available());
    Serial.println("Starting");

    if (WRITE) {
        byte b;
        for (uint16_t addr = 0; addr < EEPROMSIZE; addr++) {
            if (addr < sizeof(eepromdat)) {
                b = pgm_read_byte(eepromdat+addr);
            } else {
                b = 0xFF;
            }
            i2c_eeprom_write_byte(0x50, addr, b);
            delay(5);
            if ((addr % 32) == 0)
                Serial.println();
            Serial.print("0x");
            if (b < 0x10)
                Serial.print('0');
            Serial.print(b, HEX); //print content to serial port
            Serial.print(", ");
        }
        Serial.println("\n\r========\n\rFinished!");
    }

    for (uint16_t addr = 0; addr < EEPROMSIZE; addr++) {
        uint8_t d =  i2c_eeprom_read_byte(0x50, addr);
        Serial.print("0x");
        if (d < 0x10) Serial.print('0');
        Serial.print(d, HEX); //print content to serial port
        Serial.print(", ");
        data [i++] = d;
        if (i == 32) {
            text (i);
            i = 0;
            Serial.println();
        }
    }
    text (i);
    Serial.println();
}

void loop() {
}
